{"version":3,"file":"Font.js","sourceRoot":"","sources":["../src/Font.ts"],"names":[],"mappings":"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","sourcesContent":["import { Asset } from 'expo-asset';\nimport Constants from 'expo-constants';\nimport { Platform } from '@unimodules/core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\n\n/**\n * A font source can be a URI, a module ID, or an Expo Asset.\n */\ntype FontSource = string | number | Asset;\n\nconst isWeb = Platform.OS === 'web';\nconst isInClient = !isWeb && Constants.appOwnership === 'expo';\nconst isInIOSStandalone =\n  Constants.appOwnership === 'standalone' && Platform.OS === 'ios';\n\nconst loaded: { [name: string]: boolean } = {};\nconst loadPromises: { [name: string]: Promise<void> } = {};\n\nfunction fontFamilyNeedsScoping(name: string): boolean {\n  return (\n    (isInClient || isInIOSStandalone) &&\n    !Constants.systemFonts.includes(name) &&\n    name !== 'System' &&\n    !name.includes(Constants.sessionId)\n  );\n}\n\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n * note(brentvatne): at some point we may want to warn if this is called\n * outside of a managed app.\n */\nexport function processFontFamily(name: string | null): string | null {\n  if (!name || !fontFamilyNeedsScoping(name)) {\n    return name;\n  }\n\n  if (!isLoaded(name)) {\n    if (__DEV__) {\n      if (isLoading(name)) {\n        console.error(\n          `You started loading the font \"${name}\", but used it before it finished loading.\\n\n- You need to wait for Font.loadAsync to complete before using the font.\\n\n- We recommend loading all fonts before rendering the app, and rendering only Expo.AppLoading while waiting for loading to complete.`\n        );\n      } else {\n        console.error(\n          `fontFamily \"${name}\" is not a system font and has not been loaded through Font.loadAsync.\\n\n- If you intended to use a system font, make sure you typed the name correctly and that it is supported by your device operating system.\\n\n- If this is a custom font, be sure to load it with Font.loadAsync.`\n        );\n      }\n    }\n\n    return 'System';\n  }\n\n  return `ExpoFont-${_getNativeFontName(name)}`;\n}\n\nexport function isLoaded(name: string): boolean {\n  return loaded.hasOwnProperty(name);\n}\n\nexport function isLoading(name: string): boolean {\n  return loadPromises.hasOwnProperty(name);\n}\n\nexport async function loadAsync(\n  nameOrMap: string | { [name: string]: FontSource },\n  source?: FontSource\n): Promise<void> {\n  if (typeof nameOrMap === 'object') {\n    const fontMap = nameOrMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => loadAsync(name, fontMap[name])));\n    return;\n  }\n\n  const name = nameOrMap;\n\n  if (loaded[name]) {\n    return;\n  }\n\n  if (loadPromises[name]) {\n    return loadPromises[name];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  if (!source) {\n    throw new Error(`No source from which to load font \"${name}\"`);\n  }\n  const asset = _getAssetForSource(source);\n  loadPromises[name] = (async () => {\n    try {\n      await _loadSingleFontAsync(name, asset);\n      loaded[name] = true;\n    } finally {\n      delete loadPromises[name];\n    }\n  })();\n\n  await loadPromises[name];\n}\n\nfunction _getAssetForSource(source: FontSource): Asset {\n  if (source instanceof Asset) {\n    return source;\n  }\n\n  if (!isWeb && typeof source === 'string') {\n    return Asset.fromURI(source);\n  }\n\n  if (isWeb || typeof source === 'number') {\n    return Asset.fromModule(source);\n  }\n\n  // @ts-ignore Error: Type 'string' is not assignable to type 'Asset'\n  // We can't have a string here, we would have thrown an error if !isWeb\n  // or returned Asset.fromModule if isWeb.\n  return source;\n}\n\nasync function _loadSingleFontAsync(name: string, asset: Asset): Promise<void> {\n  await asset.downloadAsync();\n  if (!asset.downloaded) {\n    throw new Error(`Failed to download asset for font \"${name}\"`);\n  }\n  await ExpoFontLoader.loadAsync(_getNativeFontName(name), asset.localUri);\n}\n\nfunction _getNativeFontName(name: string): string {\n  if (fontFamilyNeedsScoping(name)) {\n    return `${Constants.sessionId}-${name}`;\n  } else {\n    return name;\n  }\n}\n\ndeclare var module: any;\n\nif (module && module.exports) {\n  let wasImportWarningShown = false;\n  // @ts-ignore: Temporarily define an export named \"Font\" for legacy compatibility\n  Object.defineProperty(exports, 'Font', {\n    get() {\n      if (!wasImportWarningShown) {\n        console.warn(\n          `The syntax \"import { Font } from 'expo-font'\" is deprecated. Use \"import * as Font from 'expo-font'\" or import named exports instead. Support for the old syntax will be removed in SDK 33.`\n        );\n        wasImportWarningShown = true;\n      }\n      return {\n        processFontFamily,\n        isLoaded,\n        isLoading,\n        loadAsync,\n      };\n    },\n  });\n}\n"]}